-- Credential Table responsible for store all the user credential  --
create table user_creds (id integer generated by default as identity (START WITH 1 INCREMENT BY 1) primary key,
                        username text not null unique, passwrd text not null);



-- Client Table responsible for store all the user details  --
create table user_details (id integer generated by default as identity (START WITH 1 INCREMENT BY 1) primary key,
                        firstname varchar(100), lastname varchar(100), adults integer, child integer, baby integer,
                        email varchar not null, creds_id integer,

                        foreign key (creds_id) references user_creds(id));

-- Destination Table responsible for store all the cities and their IATA CODE --
create table destination (id integer generated by default as identity (START WITH 1 INCREMENT BY 1) primary key,
                            iata text, city text);

INSERT INTO public.destination (id, iata, city) VALUES (1, 'EZE', 'Buenos Aires');
INSERT INTO public.destination (id, iata, city) VALUES (2, 'BER', 'Berlin');
INSERT INTO public.destination (id, iata, city) VALUES (3, 'BOG', 'Bogota');
INSERT INTO public.destination (id, iata, city) VALUES (4, 'CPT', 'Cape Town');
INSERT INTO public.destination (id, iata, city) VALUES (5, 'CAI', 'Cairo');
INSERT INTO public.destination (id, iata, city) VALUES (6, 'DOH', 'Doha');
INSERT INTO public.destination (id, iata, city) VALUES (7, 'HEL', 'Helsinki');
INSERT INTO public.destination (id, iata, city) VALUES (8, 'LIS', 'Lisbon');
INSERT INTO public.destination (id, iata, city) VALUES (9, 'MIA', 'Miami');
INSERT INTO public.destination (id, iata, city) VALUES (10, 'OSL', 'Oslo');
INSERT INTO public.destination (id, iata, city) VALUES (11, 'PAR', 'Paris');
INSERT INTO public.destination (id, iata, city) VALUES (12, 'ROM', 'Rome');
INSERT INTO public.destination (id, iata, city) VALUES (13, 'REK', 'Reykjavik');
INSERT INTO public.destination (id, iata, city) VALUES (14, 'LON', 'London');
INSERT INTO public.destination (id, iata, city) VALUES (15, 'AMS', 'Amsterdam');
INSERT INTO public.destination (id, iata, city) VALUES (16, 'MAD', 'Madrid');
INSERT INTO public.destination (id, iata, city) VALUES (17, 'BCN', 'Barcelona');
INSERT INTO public.destination (id, iata, city) VALUES (18, 'ZRH', 'Zurich');
INSERT INTO public.destination (id, iata, city) VALUES (19, 'RAK', 'Marrakesh');
INSERT INTO public.destination (id, iata, city) VALUES (20, 'TYO', 'Tokyo');
INSERT INTO public.destination (id, iata, city) VALUES (21, 'SEL', 'Seoul');
INSERT INTO public.destination (id, iata, city) VALUES (22, 'SCL', 'Santiago De Chile');
INSERT INTO public.destination (id, iata, city) VALUES (23, 'STO', 'Stockholm');

-- Flight Table responsible for Store all the flight details with the destination --
create table flights_details (id integer generated by default as identity (START WITH 1 INCREMENT BY 1) primary key,
                        departure_flight integer, departure_date date, return_flight integer, return_date date,
                        season varchar(100), seats integer, total_days integer, cabin varchar(100),
                        price numeric(10,2), destination_id integer, url varchar(100),

                        foreign key (destination_id) references destination(id));


UPDATE flights_details
SET    season = CASE
                         WHEN EXTRACT(MONTH from departure_date) < 3 THEN 'Winter'
                         WHEN EXTRACT(MONTH from departure_date) = 3 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Winter' ELSE 'Transition to Spring' END

                         WHEN EXTRACT(MONTH from departure_date) < 6 THEN 'Spring'
                         WHEN EXTRACT(MONTH from departure_date) = 6 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Spring' ELSE 'Transition to Summer' END

                         WHEN EXTRACT(MONTH from departure_date) < 9 THEN 'Summer'
                         WHEN EXTRACT(MONTH from departure_date) = 9 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Summer' ELSE 'Transition to Autumn' END

                         WHEN EXTRACT(MONTH from departure_date) < 12 THEN 'Autumn'
                         WHEN EXTRACT(MONTH from departure_date) = 12 THEN

                        CASE WHEN EXTRACT(DAY from departure_date) <= 20 THEN 'Autumn' ELSE 'Transition to Winter' END
                       END;

UPDATE flights_details
SET   season = CASE
                            WHEN EXTRACT(MONTH FROM departure_date) IN (12,1,2) THEN 'winter'
                            WHEN EXTRACT(MONTH FROM departure_date) IN (3,4,5) THEN 'spring'
                            WHEN EXTRACT(MONTH FROM departure_date) IN (6,7,8) THEN 'summer'
                            WHEN EXTRACT(MONTH FROM departure_date) IN (9,10,11) THEN 'fall'
                        END;

